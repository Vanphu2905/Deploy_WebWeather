name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Login Dockerhub
      env:
        DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
        DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
      run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      
    - name: Build the Docker image
      run: docker build -t vnphu18/deploy_webweather .
    - name: Push to Dockerhub
      run: docker push vnphu18/deploy_webweather:latest
      
  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure the deploy job runs only if the build job succeeds

    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # Fetch the source code from GitHub
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Set up AWS CLI
      run: |
        curl "https://d1vvhvl2y92vvt.cloudfront.net/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update

    - name: Configure AWS credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set default.region $AWS_DEFAULT_REGION

    - name: Deploy Docker image to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}  # Secret containing the private key of EC2
        EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}  # Public IP of EC2 instance
      run: |
        # Create private key file for SSH connection to EC2
        echo "$PRIVATE_KEY" > vp-keypair.pem
        chmod 600 vp-keypair.pem
        
        # SSH into EC2 and deploy Docker image
        ssh -T -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i vp-keypair.pem ubuntu@$EC2_PUBLIC_IP << 'EOF'
        # Pull Docker image from Docker Hub
        sudo docker pull ***/deploy_webweather:latest

        # Stop and remove old container (if any)
        sudo docker stop weather-app || true
        sudo docker rm weather-app || true

        # Run new container with the updated image
        sudo docker run -d --name weather-app -p 80:80 ***/deploy_webweather:latest
EOF

